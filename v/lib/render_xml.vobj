const invalid-node = "invalid XML node"

const mapping = ... => ...

def qq { str ('"', _, '"') }

const entities = byte^
[
	'"': "quot",
	'&': "amp",
	'<': "lt",
	'>': "gt",
]

def escaped
{
	const c (byte)  = _
	
	if c in entities then
	{
		return "&" entities[ c ] ";"
	}
	
	const code = str int c
	
	return "&#" code ";"
}

def escape_text
{
	const text = _
	
	const echars = text map { if _ in "<&" then {escaped _} else {_} }
	
	return str echars
}

def render_at_depth
{
	const printer, const node, const depth = _
	
	const print = printer % depth
	
	if node isa string then
	{
		print escape_text node
		return ()
	}
	
	if node isa mapping then
	{
		const tag   = node
		const name  = tag.key
		const attrs = tag.value
		
		const attr = str( attrs map { " " _.key, "=", qq _.value } )
		
		print "<" name attr "/>"
		
		return ()
	}
	
	if node isa array then
	{
		if node[ 0 ] isa mapping then
		{
			const tag   = node[ 0 ]
			const name  = tag.key
			const attrs = tag.value
			
			const attr = str( attrs map { " " _.key, "=", qq _.value } )
			
			if node.length == 2 and node[ 1 ] isa string then
			{
				const inner = escape_text node[ 1 ]
				
				print "<" name attr ">" inner "</" name ">"
			}
			else
			{
				print "<" name attr ">"
				render_at_depth( printer, node[ 1 -> node.length ], depth )
				print "</" name ">"
			}
		}
		else
		{
			for subnode in node do
			{
				render_at_depth( printer, subnode, depth + 1 )
			}
		}
		return ()
	}
	
	throw invalid-node
}

export
def render_xml
{
	const printer, const doc = _
	
	render_at_depth( printer, doc, 0 )
}
