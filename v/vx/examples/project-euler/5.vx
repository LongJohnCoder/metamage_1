#!/usr/bin/env vx

const libdir = { (dirname argv[ 0 ]) "/lib/" };
const import = { eval load libdir() _ ".vm"  };

const nth_prime = import "nth_prime";

def prime_factorization
{
	var product = _;
	
	var result = [];
	
	var i = 0;
	
	while product > 1 do
	{
		const factor = nth_prime( i++ );
		
		var n = 0;
		
		while product % factor == 0 do
		{
			product /= factor;
		
			++n;
		}
		
		if n then
		{
			result <-- factor => n;
		}
	}
	
	return result;
}

def merge_maps
{
	var result = int^[];
	
	for map in _ do
	{
		for m in map do
		{
			const k = m.key;
			
			if not k in result  or  m.value > result[ k ] then
			{
				result[ k ] = m.value;
			}
		}
	}
	
	return result;
}

def product
{
	var total = 1;
	
	for x in _ do
	{
		total *= x;
	}
	
	return total;
}

def lcm
{
	const pf = merge_maps( _ map prime_factorization );
	
	const factors = pf map { _.key ^ _.value };
	
	return product factors;
}

print lcm (1 .. 20);
