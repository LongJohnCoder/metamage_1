#!/usr/bin/env vx -Z

const libdir = { (dirname argv[ 0 ]) "/../lib/v/" }
const import = { eval load libdir() _ ".vobj"  }

const options = import "options"
const arcsign = import "arcsign"

const date-time = try { import "date-time" } catch {}

const stamp = if date-time then {{ date-time.stamp time() }} else { null }

const command_defs = str^
[
	seal:   [load, append],
	unseal: [load, truncate],
]

def warn
{
	write( ERR, _ "\n" )
}

def usage
{
	const msg = "Usage: arcsign <command> <args> ...\n"
	            "       arcsign seal -k <key-file> <msg-file> ...\n"
	            "       arcsign unseal -K <key-hex> <msg-file> ...\n"
                "       arcsign verify <msg-file> ...\n"
	
	write( ERR, msg )
	
	return 2
}

const argc = argv.length

if argc < 3 then
{
	exit usage()
}

const command = argv[ 1 ]

if not command in command_defs then
{
	exit usage()
}

def check_hash
{
	if not _ in arcsign.hash_functions then
	{
		warn "arcsign: " _ ": not a valid hash function"
		exit 2
	}
	
	return _
}

const vload = { packed load _ }

var hash = null
var key  = null

const option_defs = byte^
[
	'h': [ &hash, check_hash ],
	'K': [ &key, unhex ],
	'k': [ &key, vload ],
]

const args = options.parse( argv, option_defs, { exit usage() } )

if key isa null then
{
	warn "arcsign: a key is required"
	exit 2
}

const cmd = command_defs[ command ]

const kits = args map { const x = _; x => cmd map { _ % x } }

const params = str^[ kits: kits, key: key, hash: hash, stamp: stamp ]

const handler = import "arcsign-" command

const results = handler( arcsign, params )

var exit_status = 0

for r in results do
{
	const v = r.value
	
	if v.length > 1 then
	{
		warn "arcsign: " r.key (": ") v[ 1 ]
		
		exit_status = 1
	}
}

exit exit_status
