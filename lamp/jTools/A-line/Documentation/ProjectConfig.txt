A-line Project Config File Format
=================================

by Joshua Juran, 2006-01-17

A-line recognizes project config files by name:  either a file named A-line.conf or any file in a directory named A-line.confd.  All such files MUST conform to this specification.

A config file MUST be a valid text file, meaning that it consistently uses one of CR, LF, or CR-LF for line endings.  It MUST not end with a line that is not newline-terminated; that is, the file MAY be zero-length, but otherwise MUST end with a newline.  Processors MAY choose to be lenient about this requirement, but SHOULD emit at least a warning if not explicitly requested not to.  The file SHOULD use LF newlines, since there is no good reason not to.

Each line is considered separately.  In the future, backslash escapes may be supported for line continuation.  In the meantime, a line MUST NOT end in a backslash.

Lines that are blank (empty or consisting only of whitespace) are ignored (except for line-counting purposes).

Processed lines consist of a one-word directive followed by multiple values, all separated by whitespace.  Double quotes may be used to supply a single value that contains spaces.  Currently, a value containing spaces cannot appear with other values on the same line, but multiple lines (each with the same directive) may be used instead.

Definitions
-----------

The project directory for a project is the directory containing either the file A-line.conf or the directory A-line.confd.  A-line.confd is not the project directory.

A 'relative pathname' is a Unix-style pathname relative to the project directory.  Specifically, '.' refers to the project directory.

The search path is the sequence of directories (specified by the 'search' directive) which are searched for source files.

Directives
----------

subprojects - Each value is a pathname (relative to the project directory) to a directory from which project discovery should resume.  Applies during project discovery, even if the project is not built.

platform
arch
runtime

search - Each value is a pathname (relative to the project directory) to a directory which should be searched for source files or headers.  If multiple search directories are specified, they are searched in order given (but be mindful of recursive search).  If none are specified, '.' is used as default.  Applies for sources when the project is built and for headers when the project is used.

precompile - The supplied value is the name of a precompilable header file to be located in the search path.  The header is precompiled when the project is built, prior to compiling sources.  The precompiled header is used for building this project and all dependent projects.  Optional; default is to inherit a precompiled header from a prerequisite project or use none by meta-default.

name - The supplied value is used as the name of this project.  Optional; default is to use the name of the project directory.  Note that the same A-line.confd may contain config files specifying different project names.

program

options

creator

sources
frameworks
rsrc
rez

product - The supplied value is one of { headers, lib, app, shlib, tool, init, driver }.  This setting drives toolkit operation (e.g. 'init' assumes 68K resource with A4 globals).

uses - Each supplied value is the name of a prerequisite project, which has three effects:  The prerequisite is built first, the prerequisite's headers are searched when compiling the project, and if applicable the project is linked against the prerequisite's output.

imports - Each supplied value is the name of a shared library or a project that builds a shared library.

version - The supplied value is used as a version number.  Actually, it's not used at all.  I think.

desc - A very brief description of this project.
developer - The name or names of whoever gets credit for this project.
distributor - The name of whoever packaged this project for use with A-line.
website - A Web site address for this project in URL form.

A glance through these directives reveals these parts of speech:

noun, verb (imperative), verb (present tense, third person singular)

I'd like to consolidate these down to at most two.  This is easily done; the two present tense verbs are 'uses', which can be converted to 'use' (taking advantage of Perl's semantics), and 'imports' which can likewise become 'import', or left as is, reinterpreted as a noun.  Some things are just passive information and therefore can't be verbs because they don't do anything.  The verbs could become 'search-path', 'precompiled-header', and 'prerequisites', but that only makes things less clear.

I'd also like to introduce modifiers.  So you could write:

search privately:  private/include
search          :  include

The meaning is obvious:  The first directory is searched only for this project, not dependents.
